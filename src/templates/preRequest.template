<%= startMarker %>
// Auto-generated script to fetch secrets from 1Password

const { execSync } = require('child_process');
const { readFileSync, existsSync } = require('fs');

const SECRET_CONFIG_PATH = '<%= secretConfigPath %>';
const ONE_PASSWORD_BINARY = '<%= onePasswordBin %>';

async function fetchSecretsFrom1Password() {
    const env = bru.getEnvName();
    const isSecretLoaded = bru.getEnvVar('OP_SECRETS_LOADED');

    if (env && !isSecretLoaded) {
        console.log(`Fetching secrets for ${env} environment from 1Password...`);

        const configPath = `${bru.cwd()}/${SECRET_CONFIG_PATH}`;
        if (!existsSync(configPath)) {
            throw new Error(`Secrets doesn't exist at ${configPath}`);
        }

        const config = JSON.parse(readFileSync(configPath, 'utf8'));
        const secrets = config[env];

        if (!secrets) {
            throw new Error(`No secrets found for ${env} environment`);
        }

        const promise = secrets.map(async secret => {
            const value = execSync(`${ONE_PASSWORD_BINARY} read "${secret.value}"`);
            bru.setEnvVar(secret.name, value.toString().trim());
        });

        Promise.all(promise).catch(error => {
            console.error(error);
            throw new Error('Error fetching secrets from 1Password! Check console log for more details.');
        });

        bru.setEnvVar('OP_SECRETS_LOADED', 'true');
        console.log(
            `Secrets fetched successfully for ${env}. They will be available until Bruno is restarted.`
        );
    }
}

// Execute the function
await fetchSecretsFrom1Password();

<%= endMarker %>
